{"version":3,"sources":["component/TodoListTemplate.js","component/Form.js","component/TodoItem.js","component/TodoItemList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoListTemplate","todos","form","children","undoneTasks","filter","todo","checked","today","Date","year","getFullYear","month","getMonth","date","getDate","className","length","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","onToggle","text","id","onRemove","e","stopPropagation","size","React","Component","TodoItemList","todoList","map","App","state","input","handleChange","setState","target","handleCreate","concat","handleKeyPress","key","handleToggle","index","findIndex","selected","nextTodos","handleRemove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ac19843.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoListTemplate.css\";\r\n\r\nconst TodoListTemplate = ({todos, form, children}) => {\r\n\r\n    const undoneTasks = todos.filter(todo => !todo.checked);\r\n\r\n    let today = new Date();\r\n\r\n    let year = today.getFullYear();\r\n    let month = today.getMonth() + 1;\r\n    let date = today.getDate();\r\n\r\n    return (\r\n        <main className = \"todo-list-template\">\r\n            <div className = \"title\">\r\n                {year}년 {month}월 {date}일\r\n            </div>\r\n            <section className = \"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className = \"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n            <section className=  \"task-left\">\r\n                할 일 {undoneTasks.length}개 남음\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\n// 인풋과 버튼이 담겨있는 컴포넌트\r\n\r\n// 텍스트 내용이 바뀌면 state 업데이트\r\n// 버튼이 클릭되면 새로운 todo 생성 후 todos 업데이트\r\n// 인풋에서 Enter 누르면 버튼을 클릭한 것과 동일한 작업 진행하기\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className = \"form\">\r\n            <input\r\n                value={value}\r\n                onChange={onChange}\r\n                onKeyPress={onKeyPress} />\r\n            <div className = \"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n// value : 인풋 내용\r\n// onCreate : 버튼이 클릭될 때 실행될 함수\r\n// onChange : 인풋 내용이 변경될 때 실행되는 함수\r\n// onKeyPress : 인풋에서 키를 입력할 때 실행되는 함수. 이 함수는 나중에 Enter가 눌렸을 때\r\n// onCreate를 한 것과 동일한 작업을 하기 위해서 사용\r\n\r\n/*\r\n중괄호{} 안에 있는 애들은 함수인가보다.\r\n*/\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { MdDelete } from 'react-icons/md';\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends React.Component {\r\n    shouldComponentUpdate (nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    CheckCircle () {\r\n        const {checked, onToggle} = this.props;\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const { text, checked, id, onToggle, onRemove } = this.props;\r\n\r\n        return (\r\n            // onClick을 하면 onToggle(id)가 진행됨을 의미? onToggle이 함수니까.\r\n            // onToggle과 onRemove는 id를 파라미터로 넣으면 해당 id를 가진 데이터를 업데이트함\r\n            // 파라미터를 넣어주어야 하기 때문.\r\n            // HTML에서 \"& times\"단어를 사용하면 ×로 변경\r\n            <div className = \"todo-item\">\r\n                <div className = \"check-box\" checked = {checked} onClick = {() => onToggle(id)}>\r\n                    { checked && (<div className=\"check-mark\"> ✔ </div>) }\r\n\r\n                </div>\r\n                <div className = {`todo-text ${checked && \"checked\"}`}>\r\n                    <div> {text} </div>\r\n                </div>\r\n                <div className = \"remove\" onClick = {(e) => {\r\n                    e.stopPropagation();    // onToggle이 실행되지 않도록 함\r\n                    onRemove(id)}\r\n                }>\r\n                    <MdDelete size={20} />\r\n                </div>\r\n            </div>\r\n            // 템플릿 리터럴은 (``)이것으로 감싼다.\r\n            // 템플릿 리터럴은 그거.. 문자열 합치는 거(+) 응용 버전.\r\n            // `todo-text ${checked && 'checked'}`\r\n            // \"todo-text \" + checked && 'checked'\r\n        );\r\n    }\r\n}\r\n\r\n// text : todo 내용\r\n// checked : 체크박스 상태\r\n// id : todo의 고유 아이디\r\n// onToggle : 체크박스를 키고 끄는 함수\r\n// onRemove : 아이템을 삭제시키는 함수\r\n\r\n/*\r\nonToggle & onRemove : id를 파라미터로 가지며, 해당 id를 가진 데이터를 업데이트 함.\r\ne.stopPropagation : 삭제 부분에 들어간 이벤트가 해당 부모의 이벤트까지 전달되지 않도록 해줌.\r\n엑스마크는 &times로 표현된다.\r\n{text} : todo 내용\r\n*/\r\n\r\nexport default TodoItem;","// TodoItem 컴포넌트 여러 개를 렌더링해주는 역할\r\n\r\nimport React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoItemList extends React.Component {\r\n\r\n    // 컴포넌트 life cycle method 중 하나\r\n    // 컴포넌트가 리렌더링을 할지 말지 정함.\r\n    // todos 값이 바뀔 때 리렌더링됨.\r\n    \r\n    shouldComponentUpdate (nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map(\r\n            ({id, text, checked}) => (\r\n                <TodoItem\r\n                    id = {id}\r\n                    text = {text}\r\n                    checked = {checked}\r\n                    onToggle = {onToggle}\r\n                    onRemove = {onRemove}\r\n                    key = {id}\r\n                />\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// todos : todo 객체들이 들어있는 배열\r\n// onToggle : 체크박스를 키고 끄는 함수\r\n// onRemove : 아이템을 삭제시키는 함수\r\n\r\nexport default TodoItemList;","import React from \"react\";\nimport TodoListTemplate from \"./component/TodoListTemplate\";\nimport Form from \"./component/Form\";\nimport TodoItemList from \"./component/TodoItemList\";\n\nclass App extends React.Component {\n\n  id = 0\n\n  state = {\n    input : '',\n    todos : []\n  }\n\n   // e.target은 이벤트가 발생한 DOM을 가르킴\n  // e.target.value를 조회하면 현재 input의 value를 알 수 있다.\n  handleChange = (e) => {\n    this.setState({ input : e.target.value });\n  }\n\n  handleCreate = () => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id : this.id++,\n        text : input,\n        checked : false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const {todos} = this.state;\n\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];    // 선택한 객체\n    const nextTodos = [...todos];     // 배열 복사\n\n    // 기존의 값들 복사, checked 값 덮어쓰기\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n\n    this.setState ({\n      todos: nextTodos\n    });\n  }\n\n  handleRemove = (id) => {\n    const {todos} = this.state;\n    this.setState ({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n    \n    return (\n      <TodoListTemplate\n        todos = {todos}\n        form = {(\n          <Form\n            value = {input}\n            onKeyPress = {handleKeyPress}\n            onChange = {handleChange}\n            onCreate = {handleCreate}\n          />\n        )}>\n        <TodoItemList\n          todos = {todos}\n          onToggle = {handleToggle}\n          onRemove = {handleRemove}\n        />\n      </TodoListTemplate>\n    );\n  }\n}\n\n/*\n컴포넌트끼리 직접 데이터를 전달할때는 부모를 통해서 대화하는 것이 좋음(App.js)\nstate는 렌더링에 그 값을 필요로 하는 컴포넌트에 먼저 추가.\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}